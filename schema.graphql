type Swap @entity {
  id: ID!
  # transaction from block
  transaction: String!#Transaction!
  # timestamp from block seconds since epoch
  timestamp: BigInt!

  sender: Bytes!
  inputToken: Token!
  outputToken: Token!
  inputAmount: BigDecimal!
  outputAmount: BigDecimal!
}

enum LiquidityDirection {
  Add
  Withdraw
}

type Liquidity @entity {
  id: ID!
  # transaction from block
  transaction: String!#Transaction!
  # timestamp from block seconds since epoch
  timestamp: BigInt!

  direction: LiquidityDirection!
  token: Token!
  amount: BigDecimal!
  scx: BigDecimal!
}

type Token @entity
{
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigDecimal

  # latest value in ETH
  eth: BigDecimal!

  # last update time for eth value
  ethTimestamp: BigInt

  # last update block for eth value
  ethBlock: BigInt

  # latest value in USD
  usd: BigDecimal!
  usdTimestamp: BigInt
  usdBlock: BigInt

  # sum of all token swapped
  volume: BigDecimal

  # sum of all token swapped valued in ETH at the time of the transaction
  ethVolume: BigDecimal
  # sum of all token swapped valued in USD at the time of the transaction
  usdVolume: BigDecimal

  # total amount held
  liquidity: BigDecimal

}

type Behodler @entity {

  id: ID!

  ethVolume: BigDecimal!
  usdVolume: BigDecimal!

  ethLiquidity: BigDecimal!
  usdLiquidity: BigDecimal!

  tokens: [Token!]!

  block: BigInt!
}

# Data accumulated and condensed into day stats for all of Behodler
type BehodlerDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!

  totalVolumeETH: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal!
}